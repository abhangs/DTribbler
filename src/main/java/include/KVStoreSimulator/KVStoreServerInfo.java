package include.KVStoreSimulator; /**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KVStoreServerInfo implements org.apache.thrift.TBase<KVStoreServerInfo, KVStoreServerInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KVStoreServerInfo");

  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KVStoreServerInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KVStoreServerInfoTupleSchemeFactory());
  }

  public String serverName; // required
  public String serverAddress; // required
  public String serverPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_NAME((short)1, "serverName"),
    SERVER_ADDRESS((short)2, "serverAddress"),
    SERVER_PORT((short)3, "serverPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_NAME
          return SERVER_NAME;
        case 2: // SERVER_ADDRESS
          return SERVER_ADDRESS;
        case 3: // SERVER_PORT
          return SERVER_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("serverName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("serverAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KVStoreServerInfo.class, metaDataMap);
  }

  public KVStoreServerInfo() {
  }

  public KVStoreServerInfo(
    String serverName,
    String serverAddress,
    String serverPort)
  {
    this();
    this.serverName = serverName;
    this.serverAddress = serverAddress;
    this.serverPort = serverPort;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KVStoreServerInfo(KVStoreServerInfo other) {
    if (other.isSetServerName()) {
      this.serverName = other.serverName;
    }
    if (other.isSetServerAddress()) {
      this.serverAddress = other.serverAddress;
    }
    if (other.isSetServerPort()) {
      this.serverPort = other.serverPort;
    }
  }

  public KVStoreServerInfo deepCopy() {
    return new KVStoreServerInfo(this);
  }

  @Override
  public void clear() {
    this.serverName = null;
    this.serverAddress = null;
    this.serverPort = null;
  }

  public String getServerName() {
    return this.serverName;
  }

  public KVStoreServerInfo setServerName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  public void unsetServerName() {
    this.serverName = null;
  }

  /** Returns true if field serverName is set (has been assigned a value) and false otherwise */
  public boolean isSetServerName() {
    return this.serverName != null;
  }

  public void setServerNameIsSet(boolean value) {
    if (!value) {
      this.serverName = null;
    }
  }

  public String getServerAddress() {
    return this.serverAddress;
  }

  public KVStoreServerInfo setServerAddress(String serverAddress) {
    this.serverAddress = serverAddress;
    return this;
  }

  public void unsetServerAddress() {
    this.serverAddress = null;
  }

  /** Returns true if field serverAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetServerAddress() {
    return this.serverAddress != null;
  }

  public void setServerAddressIsSet(boolean value) {
    if (!value) {
      this.serverAddress = null;
    }
  }

  public String getServerPort() {
    return this.serverPort;
  }

  public KVStoreServerInfo setServerPort(String serverPort) {
    this.serverPort = serverPort;
    return this;
  }

  public void unsetServerPort() {
    this.serverPort = null;
  }

  /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
  public boolean isSetServerPort() {
    return this.serverPort != null;
  }

  public void setServerPortIsSet(boolean value) {
    if (!value) {
      this.serverPort = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVER_NAME:
      if (value == null) {
        unsetServerName();
      } else {
        setServerName((String)value);
      }
      break;

    case SERVER_ADDRESS:
      if (value == null) {
        unsetServerAddress();
      } else {
        setServerAddress((String)value);
      }
      break;

    case SERVER_PORT:
      if (value == null) {
        unsetServerPort();
      } else {
        setServerPort((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_NAME:
      return getServerName();

    case SERVER_ADDRESS:
      return getServerAddress();

    case SERVER_PORT:
      return getServerPort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVER_NAME:
      return isSetServerName();
    case SERVER_ADDRESS:
      return isSetServerAddress();
    case SERVER_PORT:
      return isSetServerPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KVStoreServerInfo)
      return this.equals((KVStoreServerInfo)that);
    return false;
  }

  public boolean equals(KVStoreServerInfo that) {
    if (that == null)
      return false;

    boolean this_present_serverName = true && this.isSetServerName();
    boolean that_present_serverName = true && that.isSetServerName();
    if (this_present_serverName || that_present_serverName) {
      if (!(this_present_serverName && that_present_serverName))
        return false;
      if (!this.serverName.equals(that.serverName))
        return false;
    }

    boolean this_present_serverAddress = true && this.isSetServerAddress();
    boolean that_present_serverAddress = true && that.isSetServerAddress();
    if (this_present_serverAddress || that_present_serverAddress) {
      if (!(this_present_serverAddress && that_present_serverAddress))
        return false;
      if (!this.serverAddress.equals(that.serverAddress))
        return false;
    }

    boolean this_present_serverPort = true && this.isSetServerPort();
    boolean that_present_serverPort = true && that.isSetServerPort();
    if (this_present_serverPort || that_present_serverPort) {
      if (!(this_present_serverPort && that_present_serverPort))
        return false;
      if (!this.serverPort.equals(that.serverPort))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(KVStoreServerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    KVStoreServerInfo typedOther = (KVStoreServerInfo)other;

    lastComparison = Boolean.valueOf(isSetServerName()).compareTo(typedOther.isSetServerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, typedOther.serverName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerAddress()).compareTo(typedOther.isSetServerAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverAddress, typedOther.serverAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerPort()).compareTo(typedOther.isSetServerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, typedOther.serverPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KVStoreServerInfo(");
    boolean first = true;

    sb.append("serverName:");
    if (this.serverName == null) {
      sb.append("null");
    } else {
      sb.append(this.serverName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverAddress:");
    if (this.serverAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.serverAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverPort:");
    if (this.serverPort == null) {
      sb.append("null");
    } else {
      sb.append(this.serverPort);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KVStoreServerInfoStandardSchemeFactory implements SchemeFactory {
    public KVStoreServerInfoStandardScheme getScheme() {
      return new KVStoreServerInfoStandardScheme();
    }
  }

  private static class KVStoreServerInfoStandardScheme extends StandardScheme<KVStoreServerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KVStoreServerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverName = iprot.readString();
              struct.setServerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverAddress = iprot.readString();
              struct.setServerAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverPort = iprot.readString();
              struct.setServerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KVStoreServerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverName != null) {
        oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
        oprot.writeString(struct.serverName);
        oprot.writeFieldEnd();
      }
      if (struct.serverAddress != null) {
        oprot.writeFieldBegin(SERVER_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.serverAddress);
        oprot.writeFieldEnd();
      }
      if (struct.serverPort != null) {
        oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
        oprot.writeString(struct.serverPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KVStoreServerInfoTupleSchemeFactory implements SchemeFactory {
    public KVStoreServerInfoTupleScheme getScheme() {
      return new KVStoreServerInfoTupleScheme();
    }
  }

  private static class KVStoreServerInfoTupleScheme extends TupleScheme<KVStoreServerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KVStoreServerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServerName()) {
        optionals.set(0);
      }
      if (struct.isSetServerAddress()) {
        optionals.set(1);
      }
      if (struct.isSetServerPort()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetServerName()) {
        oprot.writeString(struct.serverName);
      }
      if (struct.isSetServerAddress()) {
        oprot.writeString(struct.serverAddress);
      }
      if (struct.isSetServerPort()) {
        oprot.writeString(struct.serverPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KVStoreServerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.serverName = iprot.readString();
        struct.setServerNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverAddress = iprot.readString();
        struct.setServerAddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serverPort = iprot.readString();
        struct.setServerPortIsSet(true);
      }
    }
  }

}

